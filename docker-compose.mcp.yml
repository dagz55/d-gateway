
services:
  # MCP Gateway - Central proxy and load balancer
  mcp-gateway:
    build:
      context: ./docker/mcp-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - GATEWAY_PORT=8080
      - LOG_LEVEL=info
    networks:
      - mcp-network
    depends_on:
      mcp-supabase:
        condition: service_healthy
      mcp-filesystem:
        condition: service_healthy
      mcp-memory:
        condition: service_healthy
      mcp-puppeteer:
        condition: service_healthy
      mcp-context7:
        condition: service_healthy
      mcp-reactbits:
        condition: service_healthy
      mcp-browser-tools:
        condition: service_healthy
      mcp-tavily:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Supabase MCP Server
  mcp-supabase:
    build:
      context: ./docker/mcp-supabase
      dockerfile: Dockerfile
    env_file:
      - .env
    networks:
      - mcp-network
    ports:
      - "8081:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Filesystem MCP Server
  mcp-filesystem:
    image: node:20-alpine
    working_dir: /app
    command: ["npx", "@modelcontextprotocol/server-filesystem", "/workspace"]
    volumes:
      - ${PWD}:/workspace:ro
    networks:
      - mcp-network
    environment:
      - NODE_ENV=production
    ports:
      - "3001"
    healthcheck:
      test: ["CMD", "ls", "/workspace"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Memory MCP Server
  mcp-memory:
    image: node:20-alpine
    working_dir: /app
    command: ["npx", "@modelcontextprotocol/server-memory"]
    networks:
      - mcp-network
    environment:
      - NODE_ENV=production
    volumes:
      - mcp-memory-data:/app/data
    ports:
      - "3002"
    healthcheck:
      test: ["CMD", "test", "-f", "/app/data/memory.json"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Puppeteer MCP Server
  mcp-puppeteer:
    build:
      context: ./docker/mcp-puppeteer
      dockerfile: Dockerfile
    env_file:
      - .env
    networks:
      - mcp-network
    ports:
      - "3003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Context7 MCP Server
  mcp-context7:
    image: node:20-alpine
    working_dir: /app
    command: ["npx", "@upstash/context7-mcp@latest"]
    networks:
      - mcp-network
    environment:
      - NODE_ENV=production
    ports:
      - "3004"
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # ReactBits MCP Server
  mcp-reactbits:
    image: node:20-alpine
    working_dir: /app
    command: ["npx", "reactbits-dev-mcp-server"]
    networks:
      - mcp-network
    environment:
      - NODE_ENV=development
    ports:
      - "3005"
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Browser Tools MCP Server
  mcp-browser-tools:
    image: node:20-alpine
    working_dir: /app
    command: ["npx", "@agentdeskai/browser-tools-mcp@1.2.0"]
    networks:
      - mcp-network
    ports:
      - "3006"
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Tavily MCP Server (Search)
  mcp-tavily:
    image: node:20-alpine
    working_dir: /app
    command: ["npx", "tavily-mcp@0.2.3"]
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mcp-memory-data:
    driver: local
